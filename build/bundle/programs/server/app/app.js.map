{"version":3,"sources":["meteor://ðŸ’»app/imports/api/discus.api.js","meteor://ðŸ’»app/imports/api/helpers.api.js","meteor://ðŸ’»app/imports/api/upload.api.js","meteor://ðŸ’»app/imports/api/users.api.js","meteor://ðŸ’»app/imports/startup/accounts.config.js","meteor://ðŸ’»app/server/main.js"],"names":["Meteor","Mongo","check","helpers","Discussions","Collection","Comments","DiscussionUserMeta","startup","isServer","_ensureIndex","header","createdAt","latestComment","username","MAX_DIS","publish","searchQuery","limit","Match","OneOf","String","undefined","Number","query","queryOptions","regex","RegExp","regexMultiWordsSearch","sort","Math","min","find","id","console","log","userId","discussionId","commentLength","count","methods","data","update","$set","unreadComments","fields","fetch","unreadDiscussionMeta","unReadCount","description","Error","disExist","findOne","insert","Date","owner","user","views","comments","usersInDis","error","_id","Allusernames","users","headerObj","discussionName","headerObjOwner","forEach","value","$push","$inc","comment","commentObj","commentId","userInDiscussion","map","item","indexOf","activeDiscussionId","headers","val","isClient","module","exports","stringMatch","strOrigin","strNew","searchString","match","toString","replace","convertDate","date","hours","getHours","minutes","getMinutes","secs","getSeconds","length","year","getFullYear","month","getMonth","day","getDate","Images","Files","debug","collectionName","allowClientCode","storagePath","onBeforeUpload","file","size","test","extension","denyClient","cursor","Accounts","Roles","userIsInRole","emails","profile","status","roles","userData","email","password","passwordAgain","userType","newUserId","createUser","addUsersToRoles","call","response","remove","observe","added","removed","autorun","BlazeLayout","render","layer1","FlowRouter","go","ui","config","passwordSignupFields","forbidClientAccountCreation","adminUserData","createShit","sizeOfshit","i","UserStatus","events","on"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nimport helpers from './helpers.api.js';\n\nexport const Discussions = new Mongo.Collection('discussions');\nexport const Comments = new Mongo.Collection('comments');\nexport const DiscussionUserMeta = new Mongo.Collection('discussionUserMeta');\n\nMeteor.startup(() => {\n\n});\n\nif (Meteor.isServer) {\n\n  // index Discussions\n  Discussions._ensureIndex( { header: 1, createdAt: 1, latestComment: 1 , username: 1} );\n  const MAX_DIS = 1000;\n\n  Meteor.publish('discussions.collection', function (searchQuery = '', limit = 30) {\n    check(searchQuery, Match.OneOf( String, null, undefined ));\n    check(limit, Number);\n\n    let query = {};\n    let queryOptions = {};\n\n    if ( searchQuery ) {\n      let regex = new RegExp(helpers.regexMultiWordsSearch(searchQuery), 'i' );\n      query = {\n          header: regex\n      };\n      queryOptions = {\n        sort: {createdAt: 1},\n        limit: Math.min(limit, MAX_DIS)\n      };\n    } else {\n      queryOptions = {\n        sort: {latestComment: -1},\n        limit: Math.min(limit, MAX_DIS)\n      };\n    }\n\n    return Discussions.find(query, queryOptions);\n});\n\n\nMeteor.publish('comments.collection', function (id, limit = 5) {\n  check(id, String);\n  check(limit, Number);\n  console.log('comment litmit: ', limit);\n  // check user is loggedin\n  if(!this.userId) return null;\n\n  let query = {};\n  let queryOptions = {};\n\n\n  query = {\n    discussionId: id\n  }\n\n  let commentLength = Comments.find(query).count();\n  // console.log('commentLength: ', commentLength);\n\n  queryOptions = {\n    sort: {createdAt: -1},\n    limit: Math.min(limit, MAX_DIS)\n  };\n\n  return Comments.find(query, queryOptions);\n});\n\n  Meteor.publish('discussionUserMeta.collection', function () {\n    // check user is loggedin\n    if(!this.userId) return null;\n    return DiscussionUserMeta.find({});\n  });\n\n    Meteor.methods({\n        'clear-is-discussion-new'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            DiscussionUserMeta.update(\n                { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                {$set:{\"unreadDiscussionMeta.$.new\":false}}\n            );\n        },\n\n        'dicsussion-total-count'(data){\n          return Discussions.find({}).count();\n        },\n\n        'is-discussion-new' : function(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            const unreadComments = DiscussionUserMeta.find( { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId}, {fields: { \"unreadDiscussionMeta.$\": 1}}).fetch();\n            return unreadComments[0].unreadDiscussionMeta[0].new;\n        },\n        'update-active-discussionId'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n            DiscussionUserMeta.update(\n                { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                {$set:{\"activeDiscussionId\": data.discussionId}}\n            );\n        },\n        'clear-unread-comment-for-discussionId'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            DiscussionUserMeta.update(\n                { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                {$set:{\"unreadDiscussionMeta.$.unReadCount\":0}}\n            );\n        },\n        'get-unread-comment-for-discussionId'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            const unreadComments = DiscussionUserMeta.find( { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId}, {fields: { \"unreadDiscussionMeta.$\": 1}}).fetch();\n            return unreadComments[0].unreadDiscussionMeta[0].unReadCount;\n        },\n\n        // create new dicsussion\n        'discussions-insert'(data) {\n            check( data, {\n              header: String,\n              description: String\n            });\n\n            // Make sure the user is logged in before inserting a dis\n            if (! Meteor.userId()) {\n              throw new Meteor.Error('not-authorized');\n            }else{\n\n            }\n            // check if discussion exitst\n            const disExist = Discussions.findOne(\n              { header: data.header }, { fields: { header:1 } });\n\n            if (!disExist) {\n            return Discussions.insert({\n                createdAt: new Date(),\n                owner: Meteor.userId(),\n                username: Meteor.user().username,\n                header: data.header,\n                description: data.description,\n                views: 0,\n                comments: 0,\n                latestComment: new Date(),\n                usersInDis: []\n              }, function(error, _id){\n                // insert unread to all users\n                const Allusernames = Meteor.users.find({}, {fields: {username: 1}}).fetch();\n                const headerObj = {\n                  discussionId : _id,\n                  discussionName : data.header,\n                  unReadCount : 1,\n                  new : true\n                };\n                const headerObjOwner = {\n                  discussionId : _id,\n                  discussionName : data.header,\n                  unReadCount : 0,\n                  new : false\n                };\n                Allusernames.forEach(function(value){\n                  if(Meteor.user().username != value.username){\n                    DiscussionUserMeta.update(\n                      { username : value.username },\n                      { $push: { unreadDiscussionMeta: headerObj } }\n                    );\n                  }else{\n                    // owner\n                    DiscussionUserMeta.update(\n                      { username : value.username },\n                      { $push: { unreadDiscussionMeta: headerObjOwner } }\n                    );\n                  }\n                });\n              });\n            }\n        },\n        'add-user-to-discussion'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n            // Discussions.update(\n            //     { _id : data.discussionId },\n            //    { $push: { usersInDis: {username: data.username} } }\n            // );\n\n            // update discussion views\n            Discussions.update(\n                { _id : data.discussionId },\n                {$inc:{\"views\":1}}\n            );\n\n        },\n        'remove-user-from-discussion'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            // Discussions.update(\n            //     { _id : data.discussionId },\n            //     { $pull: { usersInDis: { username: data.username } } },\n            //     false,\n            //     true\n            // );\n        },\n        'comments-insert'(data) {\n            check( data, {\n              comment: String,\n              discussionId: String\n            });\n\n            // Make sure the user is logged in before inserting a task\n            if (! Meteor.userId()) {\n              throw new Meteor.Error('not-authorized');\n            }else{\n\n            }\n\n            return Comments.insert({\n              createdAt: new Date(),\n              owner: Meteor.userId(),\n              username: Meteor.user().username,\n              discussionId: data.discussionId,\n              comment: data.comment,\n            }, function(error, _id){\n                // update discussion comments\n                Discussions.update(\n                    { _id : data.discussionId },\n                    {\n                      $inc: {\"comments\":1},\n                      $set: {latestComment: new Date()}\n                    }\n                );\n\n                // insert unread to all users\n                const Allusernames = Meteor.users.find({}, {fields: {username: 1}}).fetch();\n                const commentObj = {\n                    commentId : _id,\n                };\n                const usersInDis = Discussions.find( { _id : data.discussionId }, { fields : { usersInDis : 1 } } ).fetch();\n                const userInDiscussion = usersInDis[0].usersInDis.map(function(item) {\n                    return item['username'];\n                });\n\n                 Allusernames.forEach(function(value){\n                     if(Meteor.user().username != value.username){\n                         if (userInDiscussion.indexOf(value.username) == -1) {\n                             DiscussionUserMeta.update(\n                                 { username : value.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                                 {$inc:{\"unreadDiscussionMeta.$.unReadCount\":1}}\n                             );\n                         }\n                     }\n                });\n            });\n        },\n        'delete-from-discussionUserMeta'(data) {\n            check( data, {\n              comment: String,\n              discussionId: String\n            });\n\n            // Make sure the user is logged in before inserting a task\n            if (! Meteor.userId()) {\n              throw new Meteor.Error('not-authorized');\n            }else{\n\n            }\n\n            // UserUnread.remove();\n        },\n        'create-user-in-discussionUserMeta'(data) {\n            check( data, {\n                    username : String\n            });\n            console.log( 'create-user-in-discussionUserMeta: ' + data.username );\n            return DiscussionUserMeta.insert({\n              username: data.username,\n              activeDiscussionId : '',\n              unreadDiscussionMeta : []\n            }, function(error, _id){\n              // create all discussions in user record\n              const headers = Discussions.find( {}, { fields: { header:1 } } ).fetch();\n              headers.forEach(function(value){\n                  const headerObj = {\n                      discussionId : value._id,\n                      discussionName : value.header,\n                      unReadCount : 0,\n                      new : false\n\n                  };\n                  DiscussionUserMeta.update(\n                      { username : data.username },\n                      { $push: { unreadDiscussionMeta: headerObj } }\n                  );\n              });\n          });\n        },\n\n        'discussionExists'(val) {\n          check(val, String);\n          return Discussions.findOne({ header: val }, { fields: { header:1 } });\n        }\n\n    });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nif (Meteor.isClient) {\n    module.exports = {\n        stringMatch : (strOrigin, strNew) => {\n            if(strOrigin === strNew){\n                return true;\n              }else{\n                return false;\n              }\n        },\n        regexMultiWordsSearch : (searchString) => {\n            // turns \"hej med dig\" into \"hej|med|dig\"\n            return searchString.match(/\\S+/g).toString().replace(/\\,/g, '|');\n        },\n        convertDate : (date) => {\n            const hours = date.getHours();\n            const minutes = date.getMinutes();\n            let secs = date.getSeconds().toString();\n            secs = secs.length > 1 ? secs : '0' + secs;\n            const year = date.getFullYear();\n            let month = (1 + date.getMonth()).toString();\n            month = month.length > 1 ? month : '0' + month;\n            let day = date.getDate().toString();\n            day = day.length > 1 ? day : '0' + day;\n            return year  + '.' + month + '.' + day + '-' + hours + ':' + minutes + ':' + secs;\n        }\n    }\n} else if (Meteor.isServer) {\n  module.exports = {\n      stringMatch : (strOrigin, strNew) => {\n          if(strOrigin === strNew){\n              return true;\n            }else{\n              return false;\n            }\n      },\n      regexMultiWordsSearch : (searchString) => {\n          // turns \"hej med dig\" into \"hej|med|dig\"\n          return searchString.match(/\\S+/g).toString().replace(/\\,/g, '|');\n      },\n      convertDate : (date) => {\n          const year = date.getFullYear();\n          let month = (1 + date.getMonth()).toString();\n          month = month.length > 1 ? month : '0' + month;\n          let day = date.getDate().toString();\n          day = day.length > 1 ? day : '0' + day;\n          return year  + '.' + month + '.' + day;\n      }\n  }\n}\n","export const Images = new Meteor.Files({\n  debug: true,\n  collectionName: 'Images',\n  allowClientCode: false, // Disallow remove files from Client\n  storagePath: '/webapp/uploads',\n  protected: true,\n  onBeforeUpload: function (file) {\n    // Allow upload files under 10MB, and only in png/jpg/jpeg formats\n    if (file.size <= 1024*1024*3 && /png|jpg|jpeg/i.test(file.extension)) {\n      return true;\n    } else {\n      return 'Please upload image, with size equal or less than 3MB';\n    }\n  }\n});\n\nif (Meteor.isServer) {\n  Images.denyClient();\n  Meteor.publish('files.images.all', function () {\n    return Images.find().cursor;\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\n\nimport './discus.api.js';\n\nif (Meteor.isServer) {\n  Meteor.publish('user.list', function (){\n    // check if user is logged in\n    if(!this.userId) return null;\n    if(!Roles.userIsInRole(this.userId, 'admin', 'users')) return null;\n    return Meteor.users.find({}, {fields: {_id:1, username: 1, emails:1, profile: 1, status:1, roles:1}});\n  });\n\n  Meteor.methods({\n    'create-new-user'(userData) {\n        // User priv check\n        if(!this.userId) return null;\n        if(!Roles.userIsInRole(this.userId, 'admin', 'users')) return null;\n        // Check user data input\n        check(userData, {\n          username: String,\n          email: String,\n          password: String,\n          passwordAgain: String,\n          userType: String\n        });\n        // Setup user data\n        userData.profile = {userType : userData.userType};\n        const userType = userData.userType;\n        delete userData.userType;\n        delete userData.passwordAgain;\n        // Create the user with role\n        const newUserId = Accounts.createUser(userData);\n        Roles.addUsersToRoles(newUserId, [userType], 'users');\n\n        // Create user in discussionUserMeta\n        const data = { username : userData.username };\n        Meteor.call('create-user-in-discussionUserMeta', data, function( error, response ) {\n          if ( error ) {\n            // Handle our error.\n            console.log('wtf: ' + error);\n            } else {\n\n            }\n        });\n    },\n    'delete-user'(userId) {\n      check(userId, String);\n      if(!this.userId) return null;\n      if(!Roles.userIsInRole(this.userId, 'admin', 'users')) return null;\n      Meteor.users.remove({_id:userId})\n    }\n  });\n\n  Meteor.users.find({ \"status.online\": true }).observe({\n    added: function(id) {\n      // id just came online\n    },\n    removed: function(id) {\n      // id just went offline\n    }\n  });\n}\n\nif (Meteor.isClient) {\n  Meteor.autorun(function () {\n    if (Meteor.userId()) {\n      // console.log('this user logged in');\n      BlazeLayout.render('mainLayout', {layer1: 'mainPageTemplate'});\n    } else {\n      FlowRouter.go('/');\n      // console.log('this user logged out');\n    }\n  });\n}\n","import { Accounts } from 'meteor/accounts-base';\n\nif(Meteor.isClient){\n  Accounts.ui.config({\n    passwordSignupFields: 'USERNAME_ONLY',\n  });\n  Accounts.config({\n    forbidClientAccountCreation : true\n  });\n}\n\n\nif(Meteor.isServer){\n  Accounts.config({\n    forbidClientAccountCreation : true\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Discussions } from '../imports/api/discus.api.js';\nimport { DiscussionUserMeta } from '../imports/api/discus.api.js';\nimport '../imports/startup/accounts.config.js';\nimport '../imports/api/users.api.js';\nimport '../imports/api/discus.api.js';\nimport '../imports/api/upload.api.js';\n\n\nMeteor.startup(() => {\n  // create admin account\n  const adminUserData = {\n    'username': 'Admin',\n    'email': 'admin@email.com',\n    'password': '123456',\n    'profile': {'userType':'admin'}\n  }\n\n  if( !Meteor.users.findOne({username: 'Admin'}) ){\n    const newUserId = Accounts.createUser(adminUserData);\n    Roles.addUsersToRoles(newUserId, ['admin'], 'users');\n    const data = {username:'Admin'};\n    Meteor.call('create-user-in-discussionUserMeta', data, function( error, response ) {\n      if ( error ) {\n        // Handle our error.\n        console.log('wtf: ' + error);\n        } else {\n\n        }\n    });\n    console.log('Created Admin User - Remeber to change pwd');\n  }\n\n  // generate demo discussions\n  const createShit = false;\n  const sizeOfshit = 500;\n  if (createShit) {\n\n    for (var i = 0; i < sizeOfshit; i++) {\n\n      const header = 'data.header ' + i;\n      const disExist = Discussions.findOne(\n        { header: header }, { fields: { header:1 } });\n        if (!disExist) {\n          console.log('create demo dis: ', header);\n\n          Discussions.insert({\n              createdAt: new Date(),\n              owner: '1234',\n              username: 'test',\n              header: header,\n              description: 'data.description',\n              views: 0,\n              comments: 0,\n              latestComment: new Date(),\n              usersInDis: []\n            });\n        }\n    }\n  }\n});\n\nUserStatus.events.on(\"connectionLogout\", function(fields) {\n    // remove user from Discussions collection userInDis\n    // console.log(fields.userId);\n    const user = Meteor.users.findOne(fields.userId);\n    const data = {\n        username : user.username,\n        discussionId : DiscussionUserMeta.find({username: user.username }).fetch()[0].activeDiscussionId\n    }\n    Meteor.call('remove-user-from-discussion', data, function( error, response ) {\n      if ( error ) {\n        // Handle our error.\n        console.log('wtf: ' + error);\n      } else {\n      }\n    });\n});\n"]}