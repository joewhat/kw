{"version":3,"sources":["meteor://ðŸ’»app/imports/api/discus.api.js","meteor://ðŸ’»app/imports/api/helpers.api.js","meteor://ðŸ’»app/imports/api/upload.api.js","meteor://ðŸ’»app/imports/api/users.api.js","meteor://ðŸ’»app/imports/startup/accounts.config.js","meteor://ðŸ’»app/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nimport helpers from './helpers.api.js';\n\nexport const Discussions = new Mongo.Collection('discussions');\nexport const Comments = new Mongo.Collection('comments');\nexport const DiscussionUserMeta = new Mongo.Collection('discussionUserMeta');\n\nMeteor.startup(() => {\n\n});\n\nif (Meteor.isServer) {\n\n  // index Discussions\n  Discussions._ensureIndex( { header: 1, createdAt: 1, latestComment: 1 , username: 1} );\n  const MAX_DIS = 1000;\n\n  Meteor.publish('discussions.collection', function (searchQuery = '', limit = 30) {\n    check(searchQuery, Match.OneOf( String, null, undefined ));\n    check(limit, Number);\n\n    let query = {};\n    let queryOptions = {};\n\n    if ( searchQuery ) {\n      let regex = new RegExp(helpers.regexMultiWordsSearch(searchQuery), 'i' );\n      query = {\n          header: regex\n      };\n      queryOptions = {\n        sort: {createdAt: 1},\n        limit: Math.min(limit, MAX_DIS)\n      };\n    } else {\n      queryOptions = {\n        sort: {latestComment: -1},\n        limit: Math.min(limit, MAX_DIS)\n      };\n    }\n\n    return Discussions.find(query, queryOptions);\n});\n\n\nMeteor.publish('comments.collection', function (id, limit = 5) {\n  check(id, String);\n  check(limit, Number);\n  console.log('comment litmit: ', limit);\n  // check user is loggedin\n  if(!this.userId) return null;\n\n  let query = {};\n  let queryOptions = {};\n\n\n  query = {\n    discussionId: id\n  }\n\n  let commentLength = Comments.find(query).count();\n  // console.log('commentLength: ', commentLength);\n\n  queryOptions = {\n    sort: {createdAt: -1},\n    limit: Math.min(limit, MAX_DIS)\n  };\n\n  return Comments.find(query, queryOptions);\n});\n\n  Meteor.publish('discussionUserMeta.collection', function () {\n    // check user is loggedin\n    if(!this.userId) return null;\n    return DiscussionUserMeta.find({});\n  });\n\n    Meteor.methods({\n        'clear-is-discussion-new'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            DiscussionUserMeta.update(\n                { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                {$set:{\"unreadDiscussionMeta.$.new\":false}}\n            );\n        },\n\n        'dicsussion-total-count'(data){\n          return Discussions.find({}).count();\n        },\n\n        'is-discussion-new' : function(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            const unreadComments = DiscussionUserMeta.find( { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId}, {fields: { \"unreadDiscussionMeta.$\": 1}}).fetch();\n            return unreadComments[0].unreadDiscussionMeta[0].new;\n        },\n        'update-active-discussionId'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n            DiscussionUserMeta.update(\n                { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                {$set:{\"activeDiscussionId\": data.discussionId}}\n            );\n        },\n        'clear-unread-comment-for-discussionId'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            DiscussionUserMeta.update(\n                { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                {$set:{\"unreadDiscussionMeta.$.unReadCount\":0}}\n            );\n        },\n        'get-unread-comment-for-discussionId'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            const unreadComments = DiscussionUserMeta.find( { username : data.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId}, {fields: { \"unreadDiscussionMeta.$\": 1}}).fetch();\n            return unreadComments[0].unreadDiscussionMeta[0].unReadCount;\n        },\n\n        // create new dicsussion\n        'discussions-insert'(data) {\n            check( data, {\n              header: String,\n              description: String\n            });\n\n            // Make sure the user is logged in before inserting a dis\n            if (! Meteor.userId()) {\n              throw new Meteor.Error('not-authorized');\n            }else{\n\n            }\n            // check if discussion exitst\n            const disExist = Discussions.findOne(\n              { header: data.header }, { fields: { header:1 } });\n\n            if (!disExist) {\n            return Discussions.insert({\n                createdAt: new Date(),\n                owner: Meteor.userId(),\n                username: Meteor.user().username,\n                header: data.header,\n                description: data.description,\n                views: 0,\n                comments: 0,\n                latestComment: new Date(),\n                usersInDis: []\n              }, function(error, _id){\n                // insert unread to all users\n                const Allusernames = Meteor.users.find({}, {fields: {username: 1}}).fetch();\n                const headerObj = {\n                  discussionId : _id,\n                  discussionName : data.header,\n                  unReadCount : 1,\n                  new : true\n                };\n                const headerObjOwner = {\n                  discussionId : _id,\n                  discussionName : data.header,\n                  unReadCount : 0,\n                  new : false\n                };\n                Allusernames.forEach(function(value){\n                  if(Meteor.user().username != value.username){\n                    DiscussionUserMeta.update(\n                      { username : value.username },\n                      { $push: { unreadDiscussionMeta: headerObj } }\n                    );\n                  }else{\n                    // owner\n                    DiscussionUserMeta.update(\n                      { username : value.username },\n                      { $push: { unreadDiscussionMeta: headerObjOwner } }\n                    );\n                  }\n                });\n              });\n            }\n        },\n        'add-user-to-discussion'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n            // Discussions.update(\n            //     { _id : data.discussionId },\n            //    { $push: { usersInDis: {username: data.username} } }\n            // );\n\n            // update discussion views\n            Discussions.update(\n                { _id : data.discussionId },\n                {$inc:{\"views\":1}}\n            );\n\n        },\n        'remove-user-from-discussion'(data){\n            check( data, {\n              username: String,\n              discussionId: String\n            });\n\n            // Discussions.update(\n            //     { _id : data.discussionId },\n            //     { $pull: { usersInDis: { username: data.username } } },\n            //     false,\n            //     true\n            // );\n        },\n        'comments-insert'(data) {\n            check( data, {\n              comment: String,\n              discussionId: String\n            });\n\n            // Make sure the user is logged in before inserting a task\n            if (! Meteor.userId()) {\n              throw new Meteor.Error('not-authorized');\n            }else{\n\n            }\n\n            return Comments.insert({\n              createdAt: new Date(),\n              owner: Meteor.userId(),\n              username: Meteor.user().username,\n              discussionId: data.discussionId,\n              comment: data.comment,\n            }, function(error, _id){\n                // update discussion comments\n                Discussions.update(\n                    { _id : data.discussionId },\n                    {\n                      $inc: {\"comments\":1},\n                      $set: {latestComment: new Date()}\n                    }\n                );\n\n                // insert unread to all users\n                const Allusernames = Meteor.users.find({}, {fields: {username: 1}}).fetch();\n                const commentObj = {\n                    commentId : _id,\n                };\n                const usersInDis = Discussions.find( { _id : data.discussionId }, { fields : { usersInDis : 1 } } ).fetch();\n                const userInDiscussion = usersInDis[0].usersInDis.map(function(item) {\n                    return item['username'];\n                });\n\n                 Allusernames.forEach(function(value){\n                     if(Meteor.user().username != value.username){\n                         if (userInDiscussion.indexOf(value.username) == -1) {\n                             DiscussionUserMeta.update(\n                                 { username : value.username, \"unreadDiscussionMeta.discussionId\" : data.discussionId,  },\n                                 {$inc:{\"unreadDiscussionMeta.$.unReadCount\":1}}\n                             );\n                         }\n                     }\n                });\n            });\n        },\n        'delete-from-discussionUserMeta'(data) {\n            check( data, {\n              comment: String,\n              discussionId: String\n            });\n\n            // Make sure the user is logged in before inserting a task\n            if (! Meteor.userId()) {\n              throw new Meteor.Error('not-authorized');\n            }else{\n\n            }\n\n            // UserUnread.remove();\n        },\n        'create-user-in-discussionUserMeta'(data) {\n            check( data, {\n                    username : String\n            });\n            console.log( 'create-user-in-discussionUserMeta: ' + data.username );\n            return DiscussionUserMeta.insert({\n              username: data.username,\n              activeDiscussionId : '',\n              unreadDiscussionMeta : []\n            }, function(error, _id){\n              // create all discussions in user record\n              const headers = Discussions.find( {}, { fields: { header:1 } } ).fetch();\n              headers.forEach(function(value){\n                  const headerObj = {\n                      discussionId : value._id,\n                      discussionName : value.header,\n                      unReadCount : 0,\n                      new : false\n\n                  };\n                  DiscussionUserMeta.update(\n                      { username : data.username },\n                      { $push: { unreadDiscussionMeta: headerObj } }\n                  );\n              });\n          });\n        },\n\n        'discussionExists'(val) {\n          check(val, String);\n          return Discussions.findOne({ header: val }, { fields: { header:1 } });\n        }\n\n    });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nif (Meteor.isClient) {\n    module.exports = {\n        stringMatch : (strOrigin, strNew) => {\n            if(strOrigin === strNew){\n                return true;\n              }else{\n                return false;\n              }\n        },\n        regexMultiWordsSearch : (searchString) => {\n            // turns \"hej med dig\" into \"hej|med|dig\"\n            return searchString.match(/\\S+/g).toString().replace(/\\,/g, '|');\n        },\n        convertDate : (date) => {\n            const hours = date.getHours();\n            const minutes = date.getMinutes();\n            let secs = date.getSeconds().toString();\n            secs = secs.length > 1 ? secs : '0' + secs;\n            const year = date.getFullYear();\n            let month = (1 + date.getMonth()).toString();\n            month = month.length > 1 ? month : '0' + month;\n            let day = date.getDate().toString();\n            day = day.length > 1 ? day : '0' + day;\n            return year  + '.' + month + '.' + day + '-' + hours + ':' + minutes + ':' + secs;\n        }\n    }\n} else if (Meteor.isServer) {\n  module.exports = {\n      stringMatch : (strOrigin, strNew) => {\n          if(strOrigin === strNew){\n              return true;\n            }else{\n              return false;\n            }\n      },\n      regexMultiWordsSearch : (searchString) => {\n          // turns \"hej med dig\" into \"hej|med|dig\"\n          return searchString.match(/\\S+/g).toString().replace(/\\,/g, '|');\n      },\n      convertDate : (date) => {\n          const year = date.getFullYear();\n          let month = (1 + date.getMonth()).toString();\n          month = month.length > 1 ? month : '0' + month;\n          let day = date.getDate().toString();\n          day = day.length > 1 ? day : '0' + day;\n          return year  + '.' + month + '.' + day;\n      }\n  }\n}\n","export const Images = new Meteor.Files({\n  debug: true,\n  collectionName: 'Images',\n  allowClientCode: false, // Disallow remove files from Client\n  storagePath: '/webapp/uploads',\n  protected: true,\n  onBeforeUpload: function (file) {\n    // Allow upload files under 10MB, and only in png/jpg/jpeg formats\n    if (file.size <= 1024*1024*3 && /png|jpg|jpeg/i.test(file.extension)) {\n      return true;\n    } else {\n      return 'Please upload image, with size equal or less than 3MB';\n    }\n  }\n});\n\nif (Meteor.isServer) {\n  Images.denyClient();\n  Meteor.publish('files.images.all', function () {\n    return Images.find().cursor;\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\n\nimport './discus.api.js';\n\nif (Meteor.isServer) {\n  Meteor.publish('user.list', function (){\n    // check if user is logged in\n    if(!this.userId) return null;\n    if(!Roles.userIsInRole(this.userId, 'admin', 'users')) return null;\n    return Meteor.users.find({}, {fields: {_id:1, username: 1, emails:1, profile: 1, status:1, roles:1}});\n  });\n\n  Meteor.methods({\n    'create-new-user'(userData) {\n        // User priv check\n        if(!this.userId) return null;\n        if(!Roles.userIsInRole(this.userId, 'admin', 'users')) return null;\n        // Check user data input\n        check(userData, {\n          username: String,\n          email: String,\n          password: String,\n          passwordAgain: String,\n          userType: String\n        });\n        // Setup user data\n        userData.profile = {userType : userData.userType};\n        const userType = userData.userType;\n        delete userData.userType;\n        delete userData.passwordAgain;\n        // Create the user with role\n        const newUserId = Accounts.createUser(userData);\n        Roles.addUsersToRoles(newUserId, [userType], 'users');\n\n        // Create user in discussionUserMeta\n        const data = { username : userData.username };\n        Meteor.call('create-user-in-discussionUserMeta', data, function( error, response ) {\n          if ( error ) {\n            // Handle our error.\n            console.log('wtf: ' + error);\n            } else {\n\n            }\n        });\n    },\n    'delete-user'(userId) {\n      check(userId, String);\n      if(!this.userId) return null;\n      if(!Roles.userIsInRole(this.userId, 'admin', 'users')) return null;\n      Meteor.users.remove({_id:userId})\n    }\n  });\n\n  Meteor.users.find({ \"status.online\": true }).observe({\n    added: function(id) {\n      // id just came online\n    },\n    removed: function(id) {\n      // id just went offline\n    }\n  });\n}\n\nif (Meteor.isClient) {\n  Meteor.autorun(function () {\n    if (Meteor.userId()) {\n      // console.log('this user logged in');\n      BlazeLayout.render('mainLayout', {layer1: 'mainPageTemplate'});\n    } else {\n      FlowRouter.go('/');\n      // console.log('this user logged out');\n    }\n  });\n}\n","import { Accounts } from 'meteor/accounts-base';\n\nif(Meteor.isClient){\n  Accounts.ui.config({\n    passwordSignupFields: 'USERNAME_ONLY',\n  });\n  Accounts.config({\n    forbidClientAccountCreation : true\n  });\n}\n\n\nif(Meteor.isServer){\n  Accounts.config({\n    forbidClientAccountCreation : true\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Discussions } from '../imports/api/discus.api.js';\nimport { DiscussionUserMeta } from '../imports/api/discus.api.js';\nimport '../imports/startup/accounts.config.js';\nimport '../imports/api/users.api.js';\nimport '../imports/api/discus.api.js';\nimport '../imports/api/upload.api.js';\n\n\nMeteor.startup(() => {\n  // create admin account\n  const adminUserData = {\n    'username': 'Admin',\n    'email': 'admin@email.com',\n    'password': '123456',\n    'profile': {'userType':'admin'}\n  }\n\n  if( !Meteor.users.findOne({username: 'Admin'}) ){\n    const newUserId = Accounts.createUser(adminUserData);\n    Roles.addUsersToRoles(newUserId, ['admin'], 'users');\n    const data = {username:'Admin'};\n    Meteor.call('create-user-in-discussionUserMeta', data, function( error, response ) {\n      if ( error ) {\n        // Handle our error.\n        console.log('wtf: ' + error);\n        } else {\n\n        }\n    });\n    console.log('Created Admin User - Remeber to change pwd');\n  }\n\n  // generate demo discussions\n  const createShit = false;\n  const sizeOfshit = 500;\n  if (createShit) {\n\n    for (var i = 0; i < sizeOfshit; i++) {\n\n      const header = 'data.header ' + i;\n      const disExist = Discussions.findOne(\n        { header: header }, { fields: { header:1 } });\n        if (!disExist) {\n          console.log('create demo dis: ', header);\n\n          Discussions.insert({\n              createdAt: new Date(),\n              owner: '1234',\n              username: 'test',\n              header: header,\n              description: 'data.description',\n              views: 0,\n              comments: 0,\n              latestComment: new Date(),\n              usersInDis: []\n            });\n        }\n    }\n  }\n});\n\nUserStatus.events.on(\"connectionLogout\", function(fields) {\n    // remove user from Discussions collection userInDis\n    // console.log(fields.userId);\n    const user = Meteor.users.findOne(fields.userId);\n    const data = {\n        username : user.username,\n        discussionId : DiscussionUserMeta.find({username: user.username }).fetch()[0].activeDiscussionId\n    }\n    Meteor.call('remove-user-from-discussion', data, function( error, response ) {\n      if ( error ) {\n        // Handle our error.\n        console.log('wtf: ' + error);\n      } else {\n      }\n    });\n});\n"]}