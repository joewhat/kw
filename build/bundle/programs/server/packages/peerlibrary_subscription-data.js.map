{"version":3,"sources":["meteor://ðŸ’»app/packages/peerlibrary_subscription-data/packages/peerlibrary_subscription-data.js"],"names":[],"mappingsfile":"/packages/peerlibrary_subscription-data.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/peerlibrary:subscription-data/lib.coffee.js                                //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar SUBSCRIPTION_ID_REGEX, checkPath, checkSubscriptionDataId;\n\ncheckPath = function(path) {\n  var field, update, value;\n  if (_.isString(path)) {\n    check(path, Match.NonEmptyString);\n    if (path === '_id' || path === '_connectionId') {\n      throw new Match.Error(\"Cannot modify '\" + path + \"'.\");\n    }\n  } else {\n    update = path;\n    check(update, Object);\n    for (field in update) {\n      value = update[field];\n      if (field === '_id' || field === '_connectionId') {\n        throw new Match.Error(\"Cannot modify '\" + field + \"'.\");\n      }\n      if (field[0] === '$') {\n        throw new Match.Error(\"Invalid field name '\" + field + \"'.\");\n      }\n    }\n  }\n  return true;\n};\n\ncheckSubscriptionDataId = function(subscriptionDataId) {\n  var splits;\n  check(subscriptionDataId, Match.NonEmptyString);\n  splits = subscriptionDataId.split('_');\n  if (splits.length !== 2) {\n    throw new Match.Error(\"Invalid subscriptionDataId '\" + subscriptionDataId + \"'.\");\n  }\n  check(splits[0], Match.DocumentId);\n  check(splits[1], Match.DocumentId);\n  return true;\n};\n\nSUBSCRIPTION_ID_REGEX = /_.+?$/;\n\nshare.handleMethods = function(connection, collection, subscriptionDataId) {\n  return {\n    data: function(path, equalsFunc) {\n      var fields, getData;\n      getData = function(fields) {\n        var data;\n        data = collection.findOne(subscriptionDataId, {\n          fields: fields\n        });\n        if (!data) {\n          return data;\n        }\n        return _.omit(data, '_id', '_connectionId');\n      };\n      if (path != null) {\n        if (_.isString(path)) {\n          fields = {};\n          fields[path] = 1;\n        } else {\n          fields = {\n            _connectionId: 0\n          };\n        }\n        return DataLookup.get(function() {\n          return getData(fields);\n        }, path, equalsFunc);\n      } else {\n        return getData({\n          _connectionId: 0\n        });\n      }\n    },\n    setData: function(path, value) {\n      var args;\n      if (value === void 0) {\n        args = [subscriptionDataId, path];\n      } else {\n        args = [subscriptionDataId, path, value];\n      }\n      return connection.apply('_subscriptionDataSet', args, (function(_this) {\n        return function(error) {\n          if (error) {\n            return console.error(\"_subscriptionDataSet error\", error);\n          }\n        };\n      })(this));\n    }\n  };\n};\n\nshare.subscriptionDataMethods = function(collection) {\n  return {\n    _subscriptionDataSet: function(subscriptionDataId, path, value) {\n      var connectionId, update, _ref, _ref1, _ref2;\n      if (Meteor.isClient || ((_ref = this.connection) != null ? _ref.id : void 0)) {\n        check(subscriptionDataId, Match.DocumentId);\n      } else {\n        check(subscriptionDataId, Match.Where(checkSubscriptionDataId));\n      }\n      check(path, Match.Where(checkPath));\n      check(value, Match.Any);\n      if (Meteor.isClient) {\n        connectionId = null;\n      } else if ((_ref1 = this.connection) != null ? _ref1.id : void 0) {\n        connectionId = (_ref2 = this.connection) != null ? _ref2.id : void 0;\n        subscriptionDataId = \"\" + connectionId + \"_\" + subscriptionDataId;\n      } else {\n        connectionId = subscriptionDataId.replace(SUBSCRIPTION_ID_REGEX, '');\n      }\n      if (_.isString(path)) {\n        update = {};\n        if (value === void 0) {\n          update.$unset = {};\n          update.$unset[path] = '';\n        } else {\n          update.$set = {};\n          update.$set[path] = value;\n        }\n      } else {\n        update = _.extend(path, {\n          _connectionId: connectionId\n        });\n      }\n      return collection.update({\n        _id: subscriptionDataId,\n        _connectionId: connectionId\n      }, update);\n    }\n  };\n};\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/peerlibrary:subscription-data/server.coffee.js                             //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar CONNECTION_ID_REGEX, SubscriptionData, originalPublish,\n  __slice = [].slice;\n\nSubscriptionData = new Mongo.Collection(null);\n\nCONNECTION_ID_REGEX = /^.+?_/;\n\noriginalPublish = Meteor.publish;\n\nMeteor.publish = function(name, publishFunction) {\n  return originalPublish(name, function() {\n    var args, id, publish, result;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    publish = this;\n    if (!publish._subscriptionId) {\n      return publishFunction.apply(publish, args);\n    }\n    assert(_.isString(publish._subscriptionId), publish._subscriptionId);\n    id = \"\" + publish.connection.id + \"_\" + publish._subscriptionId;\n    SubscriptionData.insert({\n      _id: id,\n      _connectionId: this.connection.id\n    });\n    _.extend(publish, share.handleMethods(Meteor, SubscriptionData, id));\n    result = publishFunction.apply(publish, args);\n    publish.onStop(function() {\n      return SubscriptionData.remove({\n        _id: id\n      });\n    });\n    return result;\n  });\n};\n\nMeteor.publish(null, function() {\n  var handle;\n  handle = SubscriptionData.find({\n    _connectionId: this.connection.id\n  }, {\n    fields: {\n      _connectionId: 0\n    }\n  }).observeChanges({\n    added: (function(_this) {\n      return function(id, fields) {\n        id = id.replace(CONNECTION_ID_REGEX, '');\n        return _this.added('_subscriptionData', id, fields);\n      };\n    })(this),\n    changed: (function(_this) {\n      return function(id, fields) {\n        id = id.replace(CONNECTION_ID_REGEX, '');\n        return _this.changed('_subscriptionData', id, fields);\n      };\n    })(this),\n    removed: (function(_this) {\n      return function(id) {\n        id = id.replace(CONNECTION_ID_REGEX, '');\n        return _this.removed('_subscriptionData', id);\n      };\n    })(this)\n  });\n  this.onStop((function(_this) {\n    return function() {\n      return handle.stop();\n    };\n  })(this));\n  return this.ready();\n});\n\nMeteor.methods(share.subscriptionDataMethods(SubscriptionData));\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}