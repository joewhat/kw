{"version":3,"sources":["meteor://ðŸ’»app/packages/eluck_accounts-lockout/packages/eluck_accounts-lockout.js"],"names":[],"mappingsfile":"/packages/eluck_accounts-lockout.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/eluck:accounts-lockout/accounts-lockout.coffee.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ensurePositiveNumber;                 \n\nAccountsLockout = {\n  settings: {\n    duration: 15,\n    attempts: 5\n  },\n  startup: function() {\n    AccountsLockout.updateSettingsIfSpecified();\n    AccountsLockout.scheduleUnlocksForLockedAccounts();\n    AccountsLockout.unlockAccountsIfLockoutAlreadyExpired();\n    return AccountsLockout.hookIntoAccounts();\n  },\n  updateSettingsIfSpecified: function() {\n    var key, value, _ref;\n    if (Meteor.settings[\"accounts-lockout\"]) {\n      _ref = Meteor.settings[\"accounts-lockout\"];\n      for (key in _ref) {\n        value = _ref[key];\n        AccountsLockout.settings[key] = value;\n      }\n    }\n    check(AccountsLockout.settings.duration, Match.Integer);\n    check(AccountsLockout.settings.attempts, Match.Integer);\n    if (AccountsLockout.settings.duration < 0) {\n      throw 'eluck:accounts-lockout package - \"duration\" is not positive integer';\n    }\n    if (AccountsLockout.settings.attempts < 0) {\n      throw 'eluck:accounts-lockout package - \"attempts\" is not positive integer';\n    }\n  },\n  scheduleUnlocksForLockedAccounts: function() {\n    var currentTime, lockedAccountsCursor;\n    currentTime = Number(new Date());\n    lockedAccountsCursor = Meteor.users.find({\n      'services.accounts-lockout.unlockTime': {\n        $gt: currentTime\n      }\n    }, {\n      fields: {\n        'services.accounts-lockout.unlockTime': 1\n      }\n    });\n    currentTime = Number(new Date());\n    return lockedAccountsCursor.forEach(function(user) {\n      var lockDuration;\n      lockDuration = user.services['accounts-lockout'].unlockTime - currentTime;\n      lockDuration = lockDuration < AccountsLockout.settings.duration ? lockDuration : AccountsLockout.settings.duration;\n      lockDuration = lockDuration > 1 ? lockDuration : 1;\n      return Meteor.setTimeout(AccountsLockout.unlockAccount.bind(null, user._id), lockDuration);\n    });\n  },\n  unlockAccount: function(userId) {\n    return Meteor.users.update(userId, {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0\n      }\n    });\n  },\n  unlockAccountsIfLockoutAlreadyExpired: function() {\n    var currentTime;\n    currentTime = Number(new Date());\n    return Meteor.users.update({\n      'services.accounts-lockout.unlockTime': {\n        $lt: currentTime\n      }\n    }, {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0\n      }\n    });\n  },\n  hookIntoAccounts: function() {\n    Accounts.validateLoginAttempt(AccountsLockout.validateLoginAttempt);\n    Accounts.onLogin(AccountsLockout.onLogin);\n    return Accounts.onLoginFailure(AccountsLockout.onLoginFailure);\n  },\n  validateLoginAttempt: function(loginInfo) {\n    var currentTime, duration, _ref, _ref1, _ref2, _ref3;\n    if (loginInfo.type !== 'password') {\n      return loginInfo.allowed;\n    }\n    if (!loginInfo.user) {\n      return loginInfo.allowed;\n    }\n    currentTime = Number(new Date());\n    if (((_ref = loginInfo.user.services) != null ? (_ref1 = _ref['accounts-lockout']) != null ? _ref1.unlockTime : void 0 : void 0) <= currentTime) {\n      AccountsLockout.unlockAccount(loginInfo.user._id);\n      return loginInfo.allowed;\n    }\n    if (((_ref2 = loginInfo.user.services) != null ? (_ref3 = _ref2['accounts-lockout']) != null ? _ref3.unlockTime : void 0 : void 0) > currentTime) {\n      duration = loginInfo.user.services['accounts-lockout'].unlockTime - currentTime;\n      duration = Math.ceil(duration / 1000);\n      duration = duration > 1 ? duration : 1;\n      throw new Meteor.Error(AccountsLockout.errorCode, JSON.stringify({\n        message: AccountsLockout.accountLockedMessage,\n        duration: duration\n      }));\n    }\n    return loginInfo.allowed;\n  },\n  accountLockedMessage: 'Wrong passwords were submitted too many times. Account is locked for a while.',\n  errorCode: 423,\n  onLogin: function(loginInfo) {\n    if (loginInfo.type !== 'password') {\n      return;\n    }\n    return Meteor.users.update(loginInfo.user._id, {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0\n      }\n    });\n  },\n  onLoginFailure: function(loginInfo) {\n    var currentTime, failedAttempts, lastFailedAttempt, unlockTime, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;\n    if (((_ref = loginInfo.error) != null ? _ref.reason : void 0) !== 'Incorrect password') {\n      return;\n    }\n    if (!loginInfo.user) {\n      return;\n    }\n    if ((_ref1 = loginInfo.user.services) != null ? (_ref2 = _ref1['accounts-lockout']) != null ? _ref2.unlockTime : void 0 : void 0) {\n      return;\n    }\n    failedAttempts = 1 + ensurePositiveNumber((_ref3 = loginInfo.user.services) != null ? (_ref4 = _ref3['accounts-lockout']) != null ? _ref4.failedAttempts : void 0 : void 0);\n    lastFailedAttempt = ensurePositiveNumber((_ref5 = loginInfo.user.services) != null ? (_ref6 = _ref5['accounts-lockout']) != null ? _ref6.lastFailedAttempt : void 0 : void 0);\n    currentTime = Number(new Date());\n    failedAttempts = currentTime - lastFailedAttempt > 1000 * AccountsLockout.settings.duration ? 1 : failedAttempts;\n    if (failedAttempts < AccountsLockout.settings.attempts) {\n      return Meteor.users.update(loginInfo.user._id, {\n        $set: {\n          'services.accounts-lockout.failedAttempts': failedAttempts,\n          'services.accounts-lockout.lastFailedAttempt': currentTime\n        }\n      });\n    }\n    unlockTime = 1000 * AccountsLockout.settings.duration + currentTime;\n    Meteor.users.update(loginInfo.user._id, {\n      $set: {\n        'services.accounts-lockout.unlockTime': unlockTime,\n        'services.accounts-lockout.failedAttempts': failedAttempts,\n        'services.accounts-lockout.lastFailedAttempt': currentTime\n      }\n    });\n    return Meteor.setTimeout(AccountsLockout.unlockAccount.bind(null, loginInfo.user._id), 1000 * AccountsLockout.settings.duration);\n  }\n};\n\nMeteor.startup(AccountsLockout.startup);\n\nensurePositiveNumber = function(num) {\n  return Math.abs(Number(num) || 0);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}